import { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import type { Field } from '@/types/game';

export const useQRCodeManagement = (onFieldUpdated: () => void) => {
  const { user, profile } = useAuth();
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);

  const canManageQRCode = (field: Field): boolean => {
    if (!user || !profile) return false;
    
    // Super admins can manage any QR code
    if (profile.organization_type === 'individual') return true; // Assuming super admin
    
    // Field owner can manage their own QR codes
    if (field.organization_id !== user.id) return false;
    
    // Cannot manage locked QR codes if individual user (only facilities/tournaments can)
    if (field.qr_code_locked && !profile.organization_type) return false;
    
    return true;
  };

  const canRegenerateQRCode = (field: Field): boolean => {
    if (!canManageQRCode(field)) return false;
    
    // Permanent QR codes cannot be regenerated by facilities
    if (field.qr_code_type === 'permanent' && profile?.organization_type === 'facility') {
      return false;
    }
    
    return true;
  };

  const regenerateQRCode = async (field: Field, reason?: string) => {
    if (!canRegenerateQRCode(field)) {
      toast({
        title: 'Error',
        description: 'You cannot regenerate this QR code',
        variant: 'destructive',
      });
      return;
    }

    setLoading(true);
    try {
      const oldQRCode = field.qr_code;
      const newQRCode = `field_${field.organization_id}_${Date.now()}`;

      const { error } = await supabase
        .from('fields')
        .update({ qr_code: newQRCode })
        .eq('id', field.id);

      if (error) throw error;

      // Log the regeneration
      await supabase
        .from('qr_code_audit')
        .insert([{
          field_id: field.id,
          user_id: user!.id,
          action: 'regenerated',
          old_qr_code: oldQRCode,
          new_qr_code: newQRCode,
          reason: reason || 'QR code regenerated'
        }]);

      onFieldUpdated();
      toast({
        title: 'Success',
        description: 'QR code regenerated successfully',
      });
    } catch (error) {
      console.error('Error regenerating QR code:', error);
      toast({
        title: 'Error',
        description: 'Failed to regenerate QR code',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const updateQRCodeExpiration = async (field: Field, expiresAt: string | null) => {
    if (!canManageQRCode(field)) {
      toast({
        title: 'Error',
        description: 'You cannot modify this QR code',
        variant: 'destructive',
      });
      return;
    }

    if (field.qr_code_type === 'permanent') {
      toast({
        title: 'Error',
        description: 'Cannot set expiration on permanent QR codes',
        variant: 'destructive',
      });
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase
        .from('fields')
        .update({ qr_code_expires_at: expiresAt })
        .eq('id', field.id);

      if (error) throw error;

      // Log the update
      await supabase
        .from('qr_code_audit')
        .insert([{
          field_id: field.id,
          user_id: user!.id,
          action: 'updated',
          old_expires_at: field.qr_code_expires_at,
          new_expires_at: expiresAt,
          reason: expiresAt ? 'Expiration date set' : 'Expiration date removed'
        }]);

      onFieldUpdated();
      toast({
        title: 'Success',
        description: 'QR code expiration updated successfully',
      });
    } catch (error) {
      console.error('Error updating QR code expiration:', error);
      toast({
        title: 'Error',
        description: 'Failed to update QR code expiration',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const toggleQRCodeLock = async (field: Field, locked: boolean, reason?: string) => {
    if (!canManageQRCode(field)) {
      toast({
        title: 'Error',
        description: 'You cannot modify this QR code',
        variant: 'destructive',
      });
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase
        .from('fields')
        .update({ qr_code_locked: locked })
        .eq('id', field.id);

      if (error) throw error;

      // Log the lock/unlock
      await supabase
        .from('qr_code_audit')
        .insert([{
          field_id: field.id,
          user_id: user!.id,
          action: locked ? 'locked' : 'unlocked',
          reason: reason || (locked ? 'QR code locked' : 'QR code unlocked')
        }]);

      onFieldUpdated();
      toast({
        title: 'Success',
        description: `QR code ${locked ? 'locked' : 'unlocked'} successfully`,
      });
    } catch (error) {
      console.error('Error toggling QR code lock:', error);
      toast({
        title: 'Error',
        description: 'Failed to toggle QR code lock',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    canManageQRCode,
    canRegenerateQRCode,
    regenerateQRCode,
    updateQRCodeExpiration,
    toggleQRCodeLock
  };
};
